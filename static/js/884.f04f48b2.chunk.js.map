{"version":3,"file":"static/js/884.f04f48b2.chunk.js","mappings":"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","sources":["pages/MovieDetails.jsx","services/fetchAPI.js"],"sourcesContent":["import { Suspense, useState, useEffect, useRef } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { fetchMovieData } from '../services/fetchAPI';\nimport placeholder from '../images/no-image.png';\nimport Loader from '../components/Loader';\n\nconst API_IMG_URL = `https://image.tmdb.org/t/p/original`;\n\nconst MovieDetails = () => {\n  const [movieData, setMovieData] = useState([]);\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  // console.log('location: ', location);\n  // console.log('backLinkLocationRef: ', backLinkLocationRef);\n\n  // const params = useParams();\n  // console.log('params:', params);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setError(false);\n\n    const fetchMovies = async () => {\n      try {\n        const response = await fetchMovieData(movieId);\n        if (response.length === 0) setError(true);\n\n        setMovieData(response);\n      } catch (error) {\n        setError(true);\n        console.error(error.message);\n        toast.error(\n          'Oops! Something went wrong. Please, reload the page and try again.'\n        );\n      }\n    };\n\n    fetchMovies();\n  }, [movieId]);\n\n  const {\n    poster_path,\n    title,\n    name,\n    vote_average,\n    overview,\n    genres,\n    release_date,\n  } = movieData;\n\n  const getGenresMovies = genres => {\n    if (genres) {\n      return genres.map(genre => genre.name).join(', ');\n    }\n  };\n\n  return (\n    <>\n      <Link to={backLinkLocationRef.current}>Go back</Link>\n      <div>\n        {error && <h3>Oops...</h3>}\n        {movieData && (\n          <div>\n            <img\n              src={poster_path ? API_IMG_URL + poster_path : placeholder}\n              alt={title ?? name}\n              // loading=\"lazy\"\n              width=\"200\"\n              // height=\"300\"\n            />\n            <h1>\n              {title ?? name}\n              {release_date && <span> ({parseInt(release_date)})</span>}\n            </h1>\n            <p>User score: {Math.round(vote_average * 10)}%</p>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n            <h2>Genres</h2>\n            <p>{getGenresMovies(genres)}</p>\n            <div>\n              <h3>Additional information</h3>\n              <ul>\n                <li>\n                  <Link to=\"cast\">Cast</Link>\n                </li>\n                <li>\n                  <Link to=\"reviews\">Reviews</Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'bb962418f002b21b8e856f495cf1a622';\n\nexport const fetchTrendingMovies = async (page = 1) => {\n  const { data } = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}&page=${page}`\n  );\n  // console.log('data.results:', data.results);\n  return data.results;\n};\n\nexport const fetchSearchMovies = async (value, page = 1) => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    language: 'en-US',\n    page: page,\n    include_adult: false,\n    query: value,\n  });\n  const { data } = await axios.get(`/search/movie?${searchParams}`);\n  // console.log('data:', data);\n  return data;\n};\n\nexport const fetchMovieData = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  // console.log('data:', data);\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  // console.log('data.cast:', data.cast);\n  return data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  // console.log('data.results:', data.results);\n  return data.results;\n};\n"],"names":["useState","movieData","setMovieData","error","setError","location","useLocation","backLinkLocationRef","useRef","state","from","movieId","useParams","useEffect","fetchMovies","fetchMovieData","response","length","console","message","toast","poster_path","title","name","vote_average","overview","genres","release_date","to","current","src","placeholder","alt","width","parseInt","Math","round","map","genre","join","getGenresMovies","Suspense","fallback","axios","API_KEY","fetchTrendingMovies","page","data","results","fetchSearchMovies","value","searchParams","URLSearchParams","api_key","language","include_adult","query","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}
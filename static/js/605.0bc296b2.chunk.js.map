{"version":3,"file":"static/js/605.0bc296b2.chunk.js","mappings":"oSAEaA,EAAaC,EAAAA,EAAAA,GAAH,0LAQVC,EAAaD,EAAAA,EAAAA,GAAH,kVAaVE,EAAcF,EAAAA,EAAAA,IAAH,gFAMXG,EAAOH,EAAAA,EAAAA,GAAH,2JASJI,EAAYJ,EAAAA,EAAAA,EAAH,2HAQTK,EAAUL,EAAAA,EAAAA,EAAH,gJ,gECsCpB,EAlEa,WACX,OAAwBM,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAyBR,OAvBAE,EAAAA,EAAAA,YAAU,WACRH,GAAS,GAET,IAAMI,EAAW,mCAAG,8GAEOC,EAAAA,EAAAA,IAAeJ,GAFtB,OAEVK,EAFU,OAOhBR,EAAQQ,GAPQ,gDAShBN,GAAS,GACTO,QAAQR,MAAM,KAAMS,SACpBC,EAAAA,GAAAA,MACE,sEAZc,yDAAH,qDAiBjBL,GACD,GAAE,CAACH,KAGF,0BAWIF,GAASF,GAAQA,EAAKa,OAAS,GAC/B,SAACrB,EAAD,UACGQ,EAAKc,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACnC,OACE,UAACxB,EAAD,YACE,SAACC,EAAD,CACEwB,IAAKH,EAhDN,mCAgDmCA,EAAeI,EACjDC,IAAKJ,EACLK,QAAQ,OACRC,MAAM,SAER,SAAC3B,EAAD,UAAOqB,KACP,SAACpB,EAAD,UAAYqB,MARGH,EAWpB,OAGH,SAACjB,EAAD,UAAS,4DAMhB,C,kMChFD0B,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAmB,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,SACVH,EAAAA,EAAAA,IAAA,sCACUC,EADV,iBAC0BE,IAFhB,uBACzBC,EADyB,EACzBA,KADyB,kBAI1BA,EAAKC,SAJqB,2CAAH,qDAOnBC,EAAiB,mCAAG,WAAOC,GAAP,gGAAcJ,EAAd,+BAAqB,EAC9CK,EAAe,IAAIC,gBAAgB,CACvCC,QAAST,EACTU,SAAU,QACVR,KAAMA,EACNS,eAAe,EACfC,MAAON,IANsB,SAQRP,EAAAA,EAAAA,IAAA,wBAA2BQ,IARnB,uBAQvBJ,EARuB,EAQvBA,KARuB,kBASxBA,GATwB,2CAAH,sDAYjBU,EAAc,mCAAG,WAAMlC,GAAN,yFACLoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,oBACQqB,EADR,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdpB,EAAc,mCAAG,WAAMJ,GAAN,yFACLoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,4BACgBqB,EADhB,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAIrBA,EAAK5B,MAJgB,2CAAH,sDAOduC,EAAiB,mCAAG,WAAMnC,GAAN,yFACRoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,4BACgBqB,EADhB,oBADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,EAAKC,SAJmB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/fetchAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListStyled = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 20px);\n  grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));\n  grid-gap: 16px;  \n  padding: 20px 0;  \n  `;\n\nexport const ItemStyled = styled.li`\n  border-radius: 6px;\n  overflow: hidden;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    box-shadow: rgb(158, 158, 158) 0px 4px 10px 4px;\n  }\n`;\n\nexport const ImageStyled = styled.img`\n  width: 100%;\n  height: 210px;\n  object-fit: cover;\n`;\n\nexport const Name = styled.h4`\n  margin: 5px 15px;\n  text-align: center;\n  font-size: 16px;\n  line-height: 1.1;\n  letter-spacing: 0.03em;\n  color: #3f51b5;\n`;\n\nexport const Character = styled.p`\n  margin: 5px;\n  text-align: center;\n  font-size: 14px;\n  line-height: 1.1;\n  color: #212121;\n`;\n\nexport const Message = styled.p`\n  margin: 0 auto;\n  padding: 24px;\n  text-align: center;\n  color: #3f51b5;\n  font-size: 28px;\n  font-weight: 500;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { fetchMovieCast } from '../../services/fetchAPI';\n// import ImageErrorView from '../ImageErrorView';\n// import imageError from '../../images/error-oops.jpg';\nimport {\n  ListStyled,\n  ItemStyled,\n  ImageStyled,\n  Name,\n  Character,\n  Message,\n} from './Cast.styled';\nimport placeholder from '../../images/no-image.png';\nconst API_IMG_URL = `https://image.tmdb.org/t/p/w300/`;\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setError(false);\n\n    const fetchMovies = async () => {\n      try {\n        const response = await fetchMovieCast(movieId);\n        // if (response.length === 0) setError(true);\n\n        // console.log(response);\n\n        setCast(response);\n      } catch (error) {\n        setError(true);\n        console.error(error.message);\n        toast.error(\n          'Oops! Something went wrong. Please, reload the page and try again.'\n        );\n      }\n    };\n\n    fetchMovies();\n  }, [movieId]);\n\n  return (\n    <div>\n      {/* {error && (\n        <ImageErrorView\n          imageURL={imageError}\n          alt={'Something went wrong'}\n          width=\"600\"\n          message={\n            'Please, reload the page and try again.'\n          }\n        />\n      )} */}\n      {!error && cast && cast.length > 0 ? (\n        <ListStyled>\n          {cast.map(({ id, profile_path, name, character }) => {\n            return (\n              <ItemStyled key={id}>\n                <ImageStyled\n                  src={profile_path ? API_IMG_URL + profile_path : placeholder}\n                  alt={name}\n                  loading=\"lazy\"\n                  width=\"120\"\n                />\n                <Name>{name}</Name>\n                <Character>{character}</Character>\n              </ItemStyled>\n            );\n          })}\n        </ListStyled>\n      ) : (\n        <Message>\n          We don't have information about the cast of this movie\n        </Message>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'bb962418f002b21b8e856f495cf1a622';\n\nexport const fetchTrendingMovies = async (page = 1) => {\n  const { data } = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}&page=${page}`\n  );\n  return data.results;\n};\n\nexport const fetchSearchMovies = async (value, page = 1) => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    language: 'en-US',\n    page: page,\n    include_adult: false,\n    query: value,\n  });\n  const { data } = await axios.get(`/search/movie?${searchParams}`);\n  return data;\n};\n\nexport const fetchMovieData = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return data.results;\n};\n"],"names":["ListStyled","styled","ItemStyled","ImageStyled","Name","Character","Message","useState","cast","setCast","error","setError","movieId","useParams","useEffect","fetchMovies","fetchMovieCast","response","console","message","toast","length","map","id","profile_path","name","character","src","placeholder","alt","loading","width","axios","API_KEY","fetchTrendingMovies","page","data","results","fetchSearchMovies","value","searchParams","URLSearchParams","api_key","language","include_adult","query","fetchMovieData","fetchMovieReviews"],"sourceRoot":""}
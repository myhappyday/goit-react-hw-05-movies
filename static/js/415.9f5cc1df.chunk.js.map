{"version":3,"file":"static/js/415.9f5cc1df.chunk.js","mappings":"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","sources":["components/ImageErrorView/ImageErrorView.styled.jsx","components/ImageErrorView/ImageErrorView.jsx","components/MoviesListItem/MoviesListItem.styled.jsx","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","pages/Home.jsx","services/fetchAPI.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorWrapper = styled.div`\n  max-width: 600px;\n  margin: 24px auto;\n`;\n\nexport const Image = styled.img`\n  max-width: 100%;\n  object-fit: cover;\n  margin: 0 auto;\n`;\n\nexport const Message = styled.p`\n  margin: 0 auto;\n  padding: 24px;\n  text-align: center;\n  color: #3f51b5;\n  font-size: 28px;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport { ErrorWrapper, Image, Message } from './ImageErrorView.styled';\n\nconst ImageErrorView = ({ imageURL, alt, width, message }) => {\n  return (\n    <ErrorWrapper role=\"alert\">\n      <Image src={imageURL} width={width} alt={alt} />\n      <Message>{message}</Message>\n    </ErrorWrapper>\n  );\n};\n\nImageErrorView.propTypes = {\n  imageURL: PropTypes.string,\n  alt: PropTypes.string,\n  massage: PropTypes.string,\n};\n\nexport default ImageErrorView;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const ItemStyled = styled.li`\n  border-radius: 6px;\n  overflow: hidden;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    box-shadow: rgb(158, 158, 158) 0px 4px 10px 4px;\n  }\n`;\n\nexport const LinkStyled = styled(Link)`\n  color: #3f51b5;\n  font-size: 20px;\n  font-weight: 500;\n  line-height: 1.2;\n  text-decoration: none;\n  color: #212121;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    color: #3f51b5;\n  }\n`;\n\nexport const ImageStyled = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const TitleStyled = styled.p`\n  margin: 0 auto;\n  padding: 30px 15px;\n  text-align: center;\n`;\n","import { useLocation } from 'react-router-dom'; // import { Link } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nimport {\n  ItemStyled,\n  LinkStyled,\n  ImageStyled,\n  TitleStyled,\n} from './MoviesListItem.styled';\n\nimport placeholder from '../../images/no-poster.png';\n\nconst API_IMG_URL = `https://image.tmdb.org/t/p/original`;\n\nconst MoviesListItem = ({ id, title, original_title, poster }) => {\n  const location = useLocation();\n  const currentPage = location.pathname === '/' ? 'movies' : location.pathname;\n\n  return (\n    <ItemStyled>\n      <LinkStyled to={`${currentPage}/${id}`} state={{ from: location }}>\n        <ImageStyled\n          src={poster ? API_IMG_URL + poster : placeholder}\n          alt={title ?? original_title}\n          loading=\"lazy\"\n          width=\"280\"\n          height=\"420\"\n        />\n        <TitleStyled>{title ?? original_title}</TitleStyled>\n      </LinkStyled>\n    </ItemStyled>\n  );\n};\n\nMoviesListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  original_title: PropTypes.string,\n  poster: PropTypes.string,\n};\n\nexport default MoviesListItem;\n","import styled from '@emotion/styled';\n\nexport const ListStyled = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 20px);\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  grid-gap: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport MoviesListItem from '../MoviesListItem';\nimport { ListStyled } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <ListStyled>\n      {movies.map(({ id, title, original_title, poster_path }) => (\n        <MoviesListItem\n          key={nanoid(5)}\n          id={id}\n          title={title}\n          original_title={original_title}\n          poster={poster_path}\n        />\n      ))}\n    </ListStyled>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  margin-top: 20px;\n  margin-bottom: 20px;\n  text-align: center;\n  font-size: 28px;\n  line-height: 1.16;\n  letter-spacing: 0.03em;\n  color: #3f51b5;\n`;\n","import PropTypes from 'prop-types';\nimport { Title } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      {title && <Title>{title}</Title>}\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { fetchTrendingMovies } from '../services/fetchAPI';\n\nimport Section from '../components/Section';\nimport MoviesList from '../components/MoviesList';\nimport ImageErrorView from '../components/ImageErrorView';\nimport imageError from '../images/error-oops.jpg';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setError(false);\n\n    const fetchMovies = async () => {\n      try {\n        const response = await fetchTrendingMovies();\n\n        if (response.length === 0) setError(true);\n\n        setMovies(response);\n      } catch (error) {\n        setError(true);\n        console.error(error.message);\n        toast.error(\n          'Oops! Something went wrong. Please, reload the page and try again.'\n        );\n      }\n    };\n\n    fetchMovies();\n  }, []);\n\n  return (\n    <>\n      {!error && movies && movies.length > 0 && (\n        <Section title=\"Trending today\">\n          <MoviesList movies={movies} />\n        </Section>\n      )}\n      {error && (\n        <ImageErrorView\n          imageURL={imageError}\n          alt={'Something went wrong'}\n          width=\"600\"\n          message={\n            'Please, reload the page and try again.'\n          }\n        />\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'bb962418f002b21b8e856f495cf1a622';\n\nexport const fetchTrendingMovies = async (page = 1) => {\n  const { data } = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}&page=${page}`\n  );\n  return data.results;\n};\n\nexport const fetchSearchMovies = async (value, page = 1) => {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    language: 'en-US',\n    page: page,\n    include_adult: false,\n    query: value,\n  });\n  const { data } = await axios.get(`/search/movie?${searchParams}`);\n  return data;\n};\n\nexport const fetchMovieData = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return data.results;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ErrorWrapper","styled","Image","Message","imageURL","alt","width","message","role","src","ItemStyled","LinkStyled","Link","ImageStyled","TitleStyled","id","title","original_title","poster","location","useLocation","currentPage","pathname","to","state","from","placeholder","loading","height","ListStyled","movies","map","poster_path","nanoid","Title","children","useState","setMovies","error","setError","useEffect","fetchMovies","fetchTrendingMovies","response","length","console","toast","imageError","axios","API_KEY","page","data","results","fetchSearchMovies","value","searchParams","URLSearchParams","api_key","language","include_adult","query","fetchMovieData","movieId","fetchMovieCast","cast","fetchMovieReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}